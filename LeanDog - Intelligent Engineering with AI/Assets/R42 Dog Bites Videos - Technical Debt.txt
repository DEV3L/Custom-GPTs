technical debt. The writers of agile books probably have a standardized definition they use for technical debt. And in my work, what I've found, though, what it means is that its code and software architecture or design choices that tend to slow you down over time. Examples may be choosing to not normalize the database in certain cases, or choosing to go with certain technologies or frameworks or approaches, making some sort of compromise in your software design as it evolves. That then later come back to bite you and is it the the way this happens is, it's easy to understand, sometimes you may be facing some tight schedule pressure in your work, you may be trying to work around certain limitations, dependencies on external services are things like that. And you may need to choose to compromise the the code design somewhat to to achieve a different goal. When you do that, though, you need to be aware of what you're doing. And you also, it's very helpful if you have a plan to go back and later, clean things up. I found that the best way to approach during the cleanup phase of technical as it to pay down that technical debt is to work in small chunks, very similar to the way we'd break down a story card, or set of features into story cards and little small bite sized chunks. Take a slice of the technical debt, say choose something you can accomplish today or something you can accomplish this week or this iteration. And work on that. And then let them leave the rest of it alone for now. If you have a bigger team who may be able to take more slices of the technical debt at once, but again, my experience has been it's best to approach that in bite sized chunks. And then eventually you can hear you can work with it where it makes sense. Always be sure you're working with your with your product owners, with your iteration managers and helping them understand why you're doing that refactoring or whatever to pay down that technical debt, how will help the team and let them be involved in the prioritization because it's all about choosing understanding what provides the most value at the time and executing on that
