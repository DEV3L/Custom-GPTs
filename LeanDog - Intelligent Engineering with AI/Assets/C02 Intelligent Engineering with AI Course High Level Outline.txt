# Course Outline: Intelligent Engineering with AI (.NET)

## Day 1: Introduction to TDD and AI Tools

### Morning Session:

1. Welcome and Introductions (30 minutes)
   - Introduce participants and their experience.
   - Overview of Tyler Morgan's role.
2. Introducing Tyler Morgan, the Intelligent Engineering Course Assistant (10 minutes)
3. Course Objectives and Structure (10 minutes)
   - Outline the course modules and learning outcomes.
     4.Introduction to TDD with Fizz Buzz Kata (10 minutes)
   - TDD cycle: Red, Green, Refactor.
   - Practical exercise using GitHub Copilot and ChatGPT.
   - Hands-on pair programming exercise.
4. Practical Exercise: Fizz Buzz Kata (Parse String Time) with TDD and AI Tools (1 hour 30 minutes)
   - TDD cycle: Red, Green, Refactor.
   - Practical exercise using GitHub Copilot and ChatGPT.
   - Hands-on pair programming exercise.
5. Software Craftsmanship and Extreme Programming (1 hour)
   - Introduction to SOLID principles and XP practices.
   - ZOMBIE Testing Technique.7. Wrap-Up and Q&A (15 minutes)

### Afternoon Session:

1. Overview of AI Tools and Current Capabilities (30 minutes)
   - Provide a GitHub Copilot cheat sheet.
   - Discuss the strengths and limitations of AI tools.
2. Introduction to the Roman Numeral Calculator Kata (10 minutes)
   - Practical exercise using TDD and AI tools.
   - Pair programming exercise.
3. Practical Exercise: Roman Numeral Calculator Kata with TDD and AI Tools (1 hour)
4. Refactoring Techniques and Clean Code Concepts (1 hour)
   - Practical exercise identifying code smells and refactoring with AI tools.
   - Introduce clean code principles.
5. Bowling Kata (1 hour 15 minutes)
   - Practical exercise using TDD and AI tools.
   - Pair programming exercise.
6. Wrap-Up and Q&A (15 minutes)

## Day 2: Advanced TDD and Software Craftsmanship with AI Integration

### Morning Session:

1. Recap and Introduction (30 minutes)
   - Recap of Day 1 and address any questions.
2. Gilded Rose Kata with TDD and AI Tools (2 hours)
   - Practical exercise analyzing existing code, writing tests, making tests pass, and refactoring.
   - Hands-on pair programming exercise.
3. Code Smells and Design Patterns (1 hour 30 minutes)
   - Identifying code smells and applying design patterns.
   - Pair programming exercise.
4. Wrap-Up and Q&A (15 minutes)

### Afternoon Session:

1. Introduction to Prompt Engineering (30 minutes)
   - Hands-on exercise writing effective prompts for AI tools.
2. Stubs, Mocks, Fakes, and Doubles (30 minutes)
   - Introduction and practical exercise implementing stubs, mocks, fakes, and test doubles.
   - Pair programming exercise.
3. Building a Simple MVC Application with .NET and SQLite (2 hours)
   - Setting up the project.
   - Developing the to-do task application.
   - Pair programming exercise.
4. Deploying the Application using GitHub Actions and a Free Cloud Provider (30 minutes)
   - Setting up GitHub Actions for continuous integration.
   - Configuring deployment to a free cloud provider.
   - Pair programming exercise.
5. Wrap-Up and Q&A (15 minutes)
   - Summarize key takeaways and address any final questions.
   - Conclusion of the course with additional resources and contact information for further support.
