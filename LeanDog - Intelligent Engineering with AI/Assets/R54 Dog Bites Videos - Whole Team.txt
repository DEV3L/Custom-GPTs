One key concept to that is that you have to have whole team. So what I mean by that is that the the goal is that get a group of people together in all their different crafts working together and not the dispersed them. A lot of people they work, they deliver project, the projects have great success, and they break everybody up and say, yeah, go off and do something else. We need people to perform, storming, norming, perform, and get through all the stages of team development. And then we need to work on honing our practices as a team. A lot organizations are structured like this. And that's one of the biggest challenges going Agile is that we have to consider give up these kingdoms and silos and say, How can we form Standing Teams, we don't even like teams to have names other than a fun name. So in other words, code monkeys code rats, charging tigers, Incredibles, Blue Fish, Red Fish, come up with just a cool team name, because that's what you are, you're a team, you'll work on any product, because then the day you're a technologist, and that's your passion. But we don't like to have a hey, you're the the web team or the the claims team or you're named after a product or a business function. That's really not what we got degrees to do, we get degrees to match technology to business. So the notion of having Standing Teams or whole teams, and then finally, in the type of work that each team gets based on business value is a really critical component. That also leads us away from a lot of specialization. If you have way too much specialization is very hard to do in your organization. As far as team size goes, that's another interesting topic because scrum will tell you that the team size is seven plus or minus two, not including the scrum master and product owner, our experience in our practice has been that teams need to be a little bit larger than that, we recommend 12 to 20, we have a chart that we use, to help you kind of discuss how that would happen. The reason we believe in larger team teams is it's all about feedback and learning. And you never want to have only one person in one role. If you have one for one person in that role, when they're out, then flow stops and progress stops. You also don't have a feedback loop. If you're pairing with someone, you know how far to go, you know, if you have the right quality, you know, if you're doing the spirit of the work in the right the right way. So we find 1220 person teams are about the right size, we've done studies around this 16 is kind of optimum, but it varies, right. If you have less than 12, you're probably paying too much per unit of software. If you have over 20, there's a diminishing return because the cost communication and keeping a team of that size, cohesive and collaborative is is too great. So that's our recommendation on whole teams. Again, one of the most important practices, if you don't restructure and agree on this concept, it's gonna be very hard for you to kind of embrace a lot of the agile practices, that that requires self organizing teams that don't keep getting ripped and torn apart. Another reason you want to have whole teams, if you study some of Mary Poppins work from Lean thinking, there's been studies that have proven that when you have at the Cross organizational boundaries, you can add up to 25% More work or waste, right, because you're creating additional buffers between teams and handoffs and ball passing, where if you have a self contained team, handing things off pairing, doing things, you don't have that buffer, and that that time of waste. So it's very critical if you another way to think about this is it? If you think about Theory of Constraints, if you only have one thing in one system, and that one thing isn't available, flow is going to stop. So you have to have larger team sizes with two people in roles that if one person is out, flow continues and you mitigate mitigating the risk that you know somebody that knows something that somebody else doesn't we can't get through flow throughout the system.
