Test Driven Development is how we write code at lean dog. So in essence, what a developer does is they write a small test to test a very granular piece of functionality of the application. That doesn't exist yet. And once I write that code, the next step is to write the simplest code that they could think of to make that test pass, taking an incredibly small step. And once I get that test to pass, the third leg of test driven development, is to step back now and look at the code that we've written and see, is there any way that we can improve the design? Some of the things we're looking at is, is our method doing too much is our class doing too much? Is Ken is there any way we can simplify it or make it more expressive? The way test driven development works is that it teaches us to become more sensitive to the code that we're writing. For example, let's say that we're building some functionality into a new class. And our next task becomes really difficult to write or it's not intuitive, exactly how to take a small step. That is a trigger to us to not only understand that probably, we might be getting too complex in the production code. If we're having trouble writing the next test, then we want to step back and look at the code itself and say, why is it that we're having trouble writing the next test? Is it because we've got too much complexity? And if that's the case, how do we need to evolve the code to simplify it again, another thing that we run into all the time is that it becomes fairly difficult to set up all of the mocks or to set up all of the fakes that we have to set up to test this method. Again, that's another sensation that we get as the code becoming more cloudy. In other words, when we have way too many dependencies, it's much more difficult for us to write that next test. And writing that next test is a trigger that our code is becoming too complex. If we follow this test driven development technique or practice, what we learned is that it becomes more and more difficult to write really bad code. So test driven development really helps us know and understand as our code is not clean, or as our code is not clean. It gives us some guidance around how do we evolve that. So how do we evolve that we use a technique called refactoring, which basically means changing the outside appearance of the code without changing the behavior. And the only way we can safely do that is by having tests around the code. So with the tests that are there, they're telling us or giving us information that our code isn't really clean yet, because it's becoming more difficult to write. But the tests also provide that safety net as we refactor things as we extract new methods as we produce new classes as we realize that our methods are doing too much. Those tests help us make sure that we make that next change safely.
