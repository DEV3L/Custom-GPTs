I'd like to talk about test driven development. Test Driven Development, as many of you probably know, is writing tests first, to help drive the development of your software. A lot of the key points that make things very popular for this and very useful really is emergent design really kind of helps, you know, you have a general idea of how something's going to work, you use the test to write the code that you wish you had, you then follow up by actually writing that code. And then you have tests that prove that the code does exactly what it is you are wanting the software to do. Another one of the great points of test driven development is that it helps drive the minimum necessary code that you need to write for your software. A lot of times you have issues where you're writing a lot of code, you have probably maybe actually really more than what you really need test driven development actually helps to cut that down much more to just getting the minimum viable codebase that you need for that and obviously a testable support that lasts I think the the great plus for test driven development is really confirming that the code does what it says it's supposed to do. This really comes in handy for new features and bug fixes. So you're, you're looking at you know, maybe six months down the road, you're gonna have a new revision your your team is working on that. And tester development really helps to give you the confidence that you're not accidentally breaking something that you had written previously. By adding in your new feature or
