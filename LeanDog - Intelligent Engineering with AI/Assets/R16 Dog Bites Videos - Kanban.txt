Kanban is a Japanese term, a customer card system. Another lesson from studying lean, and kind of Toyota way. Basically, what Kanban is it's it's a way to kind of see the whole system and understand the theory of constraints and limits in your system. Con means card. Bond means board. And if you think about manufacturing, the way it was applied in Toyota is that they would have cards a signal events. So if you were putting corridors on a car, and you stack of 20 doors, when it got down, about five doors left, there'll be a physical car to take to that door. And that door would say, hey, it's time to make more doors. And you'd go in and the person who makes doors and tell them to make it, so the entire system was pull based. If they're selling cars, that one of the line, then that would signal that we need to start selling more cars. And if they're selling cars with bad doors, we don't want to build up a ton of inventory. Like these physical doors if the design of the door is wrong. So in software, the parallel is that physical inventory, that's our that those are requirements for us to doors are story cards, we don't want to build up a ton of requirements, if we aren't shipping business value. Kanban really has three explicit rules. One is make your work visible. So make it a token or make it a card. So turn August, create all your story cards, create all your work products, put it visually up on a wall, then kind of measure out and flow out what are your system and which states are all these different cards in the next rule to come on after you make a visible is to start applying limits. So what you want to do is be a five five developers or 10 developers pairing, you set a limit of five for the development state, and you stick make people stick to that state. So they can't if they're working, and they need to pass something over to test and test is already backed up. And they already had their capacity, you actually stopped coding, because we don't want to build up more code that doesn't have a fast feedback cycle. So the times in between the active states or the wait states, and we're going to keep those very small. We know that if you if you find a defect, and I just coded something yesterday, it's gonna be cheaper and easier for me to fix it. If you find a defect that coded it last week, it's going to be much more costly. So after you make your work visible, start applying limits, alright, and then applying this pull based thinking. That's the third rule. So the third rule is if work is float up, don't keep piling on more work. Wait until work downstream like QA or getting to production happens before you start coding and creating more requirements. So the entire system should pull out to production from the beginning of value stream. So Kanban is a practice we're very passionate about here at lean, lean dog. And it's something you should explore if you're doing Scrum. If you don't only don't combine sheets for Scrum and compare contrast and choose what works best for your organization.
