A practice that we feel is very critical or very important for producing high quality software is paired programming. It's also a practice that's somewhat controversial with some customers or some clients. They seem to have this perception that if you have two people working at a single keyboard and a single computer, that you're spending twice as much money to have the same thing produced. But that doesn't jive with our experience at all. What we found is that two people actually will produce more software than one person. But not only will they produce more software, but to produce a higher quality software with less defects. The role of a developer is not a role of typing on a keyboard, if typing on the keyboard, were all there was to software development, then pair programming wouldn't work, it would be twice as expensive. But the fact is, is that building software is all about taking a large problem, breaking it down into a smaller chunk, and then taking that and breaking it into smaller pieces until we get to a point where we've got things that are small enough to be actionable. And then knowing how to take those small pieces and compose them and build them up into larger pieces of software. There's a lot of art to that. Having two minds working on that collaborate on that discussing that constantly, constantly produces a higher quality product that helps us think about those things, introducing more minds to solve a problem and more people to solve a problem. What we find is that the more eyes we get looking at code, the higher quality that code becomes. So more people introduce more ideas. And we've heard the same two minds are better than one. Well, here at lean dog. We switch pairs fairly frequently. And we coach teams, we coach our clients to switch pairs at least once a day, if not more frequently. And when we do this, we get more people looking at the code, more people helping coming up with the ideal solution. As a result we have a higher quality product with far fewer defects. Pair programming is one of the practices that we think is fundamental and essential for developers and testers to follow.
