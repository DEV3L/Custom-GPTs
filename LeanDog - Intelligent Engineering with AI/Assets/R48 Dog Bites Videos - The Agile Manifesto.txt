For those of us who were building software in the 1980s, and 1990s, saw a couple of things happen. Number one, we saw the software that we were building become more and more complex and larger and larger. And as a result of projects to build them became larger, and have the projects become larger and more complex, our ability to actually predict and plan, the projects started to diminish in the 90s. I remember Gartner Group coming out with reports that were saying things like 70, or 80% of all software projects were failing. And I know that to be true, because I saw it firsthand. We just had no way of building such large, complicated systems, in fashion that we were typically doing it where we were trying to do all of our analysis upfront, and trying to understand every facet of the software, trying to do build the entire thing and not beginning testing until it was complete. So we also started living a lie about that time. And that lie was we started telling our customers that we could predict this, that we could be accurate now. And we actually knew this wasn't right. Some of what we ended up doing was during the planning process, if we thought that it would take us six months to do to the development for the project, we report it would take nine or 10 months, it was very common to patch the estimates only because we knew that there was way too much uncertainty. So that really felt like a lie. We also set up these processes called change control processes, which were basically designed to cause our customers not to change their mind, or at least to make it very painful for them to change their mind. And so a lot of folks weren't happy with this. And in the 80s and 90s, some people started trying different things and different ideas, and started stepping outside of the norm for what we thought software development was. And they started seeing some successes and some failures and such. They were sharing with each other what they saw, they would come together at conferences and talk about what they were doing. And pretty soon they started seeing some common threads in what was working and what wasn't working. And I guess he decided it was time to come together and kind of codified that or those common threads. So little over a decade ago, those handful of folks came together, and came up with a set of values and principles that we now call the Agile Manifesto. And this was their ideal around how we can build software successfully. Now it doesn't really talk about any specific practices. And to be quite honest to folks that were there, we're using a lot of different practices. But what it does talk about is a whole philosophy, a mindset, set of values that that if we adhere to, we tend to move things along in a very, in a fashion where we get very rapid feedback, we move along in small increments. And we learn to value things that are important like working software, and like things that our customers can touch. And we learn to collaborate with our customers, instead of setting up these contracts around, you know, you need to get this everything and you're never allowed to change your mind. Instead, we actually encourage them to change their mind, and give them the ability and the power to actually drive and steer the team throughout the development process. To be quite honest, I knew of no better way to do it today. And so the Agile Manifesto is strong and true to this day. The thing that I see the most out there with teams who are trying to adopt Agile is that so many folks don't realize that it is a set of values and principles. And instead they focus on some of the practices that are usually associated with Agile. And I think that they're missing a lot by not understanding why we're doing it this way and how we're doing it and and so I strongly encourage you to go look at the manifesto. Read it.

Live in it
