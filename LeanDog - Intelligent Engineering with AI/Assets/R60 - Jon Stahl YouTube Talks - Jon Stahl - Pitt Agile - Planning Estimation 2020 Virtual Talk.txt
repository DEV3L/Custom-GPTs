And that was agile, we're flipping the triangle. So the typical time scope and cost triangle. So under waterfall, right, you would have a fixed scope, you would try to estimate things very precisely those requirements, you would then estimate the cost and estimate the time. With agile, what we're doing is we're fixing the team. So we're establishing whole Standing Teams. So as soon as we do that, and Scrum will tell you, a team size is seven plus or minus two, I can tell you from experience that that's, we'd like bigger teams 12 to 16 people per team. And there's a reason for that. And I'm only going to cover scrum today and not Kanban. But I have another talk on Kanban explains why we need bigger teams, because we need more T shaped people. But the point being is that we're as soon as we fix the team, meaning we're trying not to loan resources, or hate the word resources people, right from team to team, once we fix the size of the team, we've now fixed the cost, because the cost is the salaries of that of that team. Okay, we also are now going to work in one or two week iterations. So we're going to work in one or two week sprints, and we're going to set our fixing the time. So now that we have a Standing Team, we have fixed time, the only thing that can change is scope. Okay, so the predictability of what we're going to do the estimates, right, which we're going to spend a lot time talking about today, that's the only thing that can vary. So this is a fundamental concept to agile, that we're flipping that triangle. And that estimation is not a precision game. And that's kind of I think the fallacy of waterfall is that people think that it is precise that a creative process, such as creating software is very precise. It's not it's creative. So it's very variable. So we'll talk about how we overcome that. So we're going to talk only today about Scrum, not Kanban. I'm a bigger fan of Kanban, and Scrum. So if you're not familiar with Kanban, you should study that. We do offer a free agile explain class, I think it's just going to be sending out to everybody. And if you wanted to go the Kanban section, you could, but scrum has some basic terminology, like we have a product backlog. So your product product backlog is basically call it your requirements. Okay? We've called them story cards in Scrum, we then take from that product backlog, the requirements that we think we can get done in a sprint or an iteration. And we make that the sprint backlog. So we pull out the things we think we can get done in a one or two week period, right? We put them in as in that current iteration, right. And then we work from one to two weeks. I know this diagram shows two to four weeks, but scrum even changed that a long time ago, nobody, nobody just over two weeks now. Because the feedback loops tool home, we have a daily standup or daily scrum meeting, where we actually talk about what we're doing what we're working on. And the goal is that at the end of that one or two week iteration, we can we're now shipping, working software. Okay, so that's the basic scrum terminology. So product backlog, also known as story cards, right? Story cards are really what they are their index cards ready for close notes, right. And so they're actually they don't they, the stories are not tasks. So they're usually written in a format like this, as the user, I want this so that I can do this. So it's demonstratable business value. So as a user, I want to be able to log into the system so that I can gain access to the technology. Okay, so there might be a lot of tasks that go behind that story card. But what we're trying to do is we're trying to write this as demonstratable business value, okay, and that this seems really easy. But really, the purpose of the story is to start the right conversation about how can we actually achieve that business value. And the business doesn't care about the task, they don't care. If you need to create a database table, a front end and back end, they don't really care. All they want is demonstratable business value. And so that's how we write stories. It's hard, it seems easy at first. And if you're new to agile, you start writing stories. Most people write stories that are really big. There's a rule called the InVEST principle, where you have to write stories are independent, negotiable, valuable, estimable, and small and testable. And usually, when teams first start, they write a lot of large stories. And then as they start breaking it down in the backlog and release planning, they start to kind of split. And they say, Well, we could actually make that smaller and smaller and smaller. So how do you write stories are really small? They're independent, right? So this is a craft. I wish it was that simple. We do one or two day workshops around just writing stories. But you know, initially, if people are going to write stories the best they can, and you'll mature over time. So let's get into kind of the whole point of this talk, which is how do we do really estimation sizing and backlog planning? So there's a concept in Agile called Planning poker. A good friend of mine, James grunting is one of the Agile Manifesto owners, James actually invented that, and he's been in the boat here. He's I've taught classes with him. And the way James described how he came up with planning poker is he basically was sitting in a room with a whole bunch of very smart people. And they had loads and loads and loads of requirements. And they were trying to come up with these precise, accurate estimates. And all of these really smart, analytical, analytical people around the table were trying to come up with because they knew they're going to be held to it in a waterfall world, right? The whatever we say, however, large or small, we say this thing's going to be how big it is to do, we're going to be held to that. So they would talk about one requirement for 2030 minutes an hour. Right? Then they talked about the next requirement for 20. You know, they were they were all trying to pretend like what they were doing was very precise. So James, at one point, took a bunch of index cards. And he wrote down small, medium, large, extra large, double XL, okay? And he said, Okay, let's assume this small card, extra small card is less than a day of work. And a small card is one to two, the mediums two to 468, and so forth. And He then wrote that down in index cards, and he handed out they created a set of those cards. That's why they're called called Planning poker. They were like poker parts. And he said, Okay, well, here's, here's your cards, and I'll show you the lino cards, and here's the t shirt sizes. Okay? And he said, Okay, now I went to developers, okay. And I talked about why only developers, I went to developers to basically, I'm going to discuss the requirement. So as a user, I want to be able to log into this system, so that I can do something. And now I want you to take your cards and just like poker, I want you to look at the size and say, Well, I think that's actually a medium size. Okay, and then the next developer would go, Oh, I think that's a small, and then somebody else would say, Okay, I think that's a small, so the developers would then put their cards facedown on the table, and they would basically do a poker flop. So let me just go to my live. Let me stop my share for a second. Okay, can you guys see me? My friend, Senator. Okay. So now that they they basically have their cards, and they lay them down on the table? They would do the flop, and then flip them over? It's okay. Wow, you know, what, Jeff thought it was a medium. Amy thought it was a small and John thought it was a small. Okay, so Wow, it looks like it's a small. Now, if we did the flop, and somebody had something like an extra large, and then most of us had a small or medium, we probably ought to have a conversation. Like, hey, you know, Linda, why did you think that was an extra large. And then Linda would speak up and you by the way, you're doing this in front of your business partners? Okay, this transparency of planning, poker is not just done by it, your business partners, your product owners are sitting in the room watching you actually do this. So they're realizing that by watching a bunch of smart people, right, do this, this estimation, that wow, even if you know, Linda, thought it was an Excel John thought it was a small, wow, that's a completely different scale. So clearly, estimation is hard. And it's not precise. Okay, so the value in my opinion of planning, poker is a business hearing that conversation, and then Linda speaks up and says, Well, you know why this is XL, because I just did something like this. And we're you got, we got to think through the security implications, we got to think that through some of the design things, you know, there's, there's a lot of ways we could solve that problem. And and this is my knowledge about how I think I would solve the problem. And how lended itself, the problem might be different than how Jeff would solve the problem. So the value of this, this whole estimation process is you're exposing to your business partners, that a bunch of smart people couldn't even agree on how big or small it was. And it isn't precise. And but so so again, it's the conversation. I actually talked this plenty book of this. I was teaching class with James and he, and I said, Great crater plenty pokers can explain this. And he goes, No, I want to hear you tell the story. Not me. So I told the story. And I said, you know, to me that the most valuable part of the of this whole thing was the conversation about, you know, how hard it is, as a creative person to actually predict predict something. And so the conversation is valuable, James like, it's funny, because I actually invented planning poker to get people to shut up.

I there was so much analytical debate over something that was not precise. The whole point was we were talking too much. And so most of the time, when you do planning poker, you will come out, right? So so again, the way this works, you have your product owner, business analysts, they're sitting in a room, they're talking about the user story card, they're saying, as a user, I want this so that I can do this. developers, testers. Everybody's in the room, the entire team is in his planning game. But the estimate issue is actually done by the developers, I'll come back to that as to why only the developers, so they will read the card would be everybody will take their cards, they'll do the thing we'll do the flop with, okay, we start to get a stack of cards. And we try to do this virtually. So now I have a bunch of small cards, we did, these are all kind of medium cards. These are large cards. Okay, so now we've established kind of the size of things. And we've done again, done this in front of the business. Now what we need to do is apply point value to it. So we take all the extra small cards, and we and we say okay, that's worth one point. Okay, we take the small cards, and we say it's worth two points, we take the medium cards with four, if you notice, we're doubling the point value for each t shirt size 124 816. The reason we're doubling the size of the points is that indicate that that's that's risk, right? If something's really easy to do, then it's, you know, there's less risk it's going to grow on you. If something's Extra Large to do, there's a chance that it's going to grow in scope. So the reason we do that is account for that. So if we're talking about the analogy I could use will be from digging a hole, right? That's pretty precise, I can probably look around, there's no trees, no roots, okay, probably predict how long that might take, if I'm going to dig a ditch. Okay, there's a lot more uncertainty and doing something big, right? If it's harder and more complex, there's more chances that we're not going to be that precise in sizing things. So we double the points again, for risk. So now that I have the cards, okay, laid out and I know the small to medium. Usually in the bottom of this card, I'll put the size of the card. So as you can see an extra large is a 16. Right, a large is an eight. Okay, so we actually put the point value in the side side. So now that we've established kind of the relative size of things. And you know, humans are much better at judging the size of things than being precision on ours. It's kind of like, is it a Chihuahua, or Great Dane or a bulldog? Right, it will be different sizes. So when it comes down to t shirt sizes, it's a lot of y'all we're trying to do is we're trying to tell our business partners. Well, that's extra large, and that's extra small. So I have a budget. My budget is I have a two week time, I have a fixed team that can work on this, this thing. And they can solve so many problems in a week, they can only achieve so much business value in a given period. So I have to make a decision. Do I want 10? Extra smalls or one extra large? Do I want calla zones? Or do I want an extra large pizza? Right? Or do I want breadsticks and two Cal zones? So the whole point, right is we're trying to give the bits of the business if this isn't a precision game, we have only five orders of magnitude of problem solving here. And we can only solve so many problems in a given period. Okay, so I

actually had the same question. Someone else Greg did. Doubling the points versus Fibonacci.

Yeah. So that's a it's a great, great one. So Fibonacci. Was this other one that created it? It sounds really good. I didn't we never practiced that. It came out in the book. And it sounded Ellis next Fibonacci sounds like a really good thing. James Grenier himself will tell you, that's way meant to wait way too much too many orders of magnitude. Right? It's, I don't we don't use it. We use we use t shirt sizes. And we use even points. Because it's easier to do the math. And and the again, having all those I mean, how many are there and Fibonacci actually have it in my slide deck here. There's what? Zero, I can't even remember one, three. So all those 369 1111 theories of complexity. Right? That's just way too many. T shirts are plenty for us. And it's always worked. And, you know, it's hard for me to say, well, it's something infinity or one, or three or seven. First was an extra large, small medium, right? Even our business can relate to that. We start using Fibonacci, I think your customers look at and say, Wow, we look at all this precision, like Fibonacci sounds like they have this scientific equation, right? And how to do estimation. And it's not that it's not that it's what we do is a lot simpler. It's a lot less precise. We're knowledge workers, and it's creative process. You know, I tell people that writing code can be like writing an email. If I have to write a really important email, I could take eight hours to do it. Or I could take two minutes, right? I could overanalyze it, keep refactoring it, changing it doing it. We're all set because that's a creative process communication, right? So it's no different than writing code. Okay, so now that we have a bunch of story cards, I'm gonna try to make sure you guys can see me good. Okay, so now up here in the wall. I have a whole bunch of story cards. So In this case, I have two different product owners. So here's product owner a, there's the orange cards, there's product owner B, which has a bunch of yellow cards, okay? So it's also okay for a team to be delivering for multiple product owners. Typically, you create agile teams, and you give them a one to one like, hey, this product owner gets this team. But when you start building larger teams, we could absolutely serve multiple product owners. So now that we've written the cards up here, and we put the point value, so much a small, medium, large as extra largest, we have 816 is twos fours, written all over them. Now what we need to do is release planning. Okay, so see here, am I Oh, cameraman, so bear with me. So now we're going to take these cards, and we're going to pull off the storyboard wall, we're gonna say, alright, we have a one week, here's the first iteration. Can you guys see this? Okay? Okay, so we have iteration one, that's, that's a one or two weeks sprint, iteration to iteration three, iteration four, five, and six. Okay, so we're going backwards that way. We don't know, for this team, whatever the last is going to be, we don't know how many problems we can solve in a sprint. So we're going to, we're basically gonna guess, we're gonna say, well, would it be great if we could get 10 points done in the first iteration? Maybe we get 10. There, maybe our team starts to storming, norming. performing better, now we're gonna get 1212 1414. So we start off with a best guess. And we say, well, we know that there's only so many story cards, that we can get done in a given sprint. So now that we set a rule for 10. Now what we need to do is we need to kind of fill fill it up. So we get the product owners up here and we say, Okay, what do you want us to build? First? What business value is liberal first? So here's the well, I'd like to get to this extra small card. That's a one, that's a four, that's a five. And I'd like to get this of its age. Okay, well, we are limits 10. So now we need to go back to the well, and we need to find something that we think we can do. Now, in this case, we have two product orders. So we have five for that product owner. So maybe there's, you know, the next product owner may choose another five. So now guess what? first sprint, two product owners, they're gonna get five points, they're gonna get five points. Okay, so we continue to do this. And the product owners are the ones who are initially laying out the product backlog. So imagine the waterfall, you're not building the Gantt chart, you're building the cancer, but you didn't build the Gantt chart your business owners did, right? They now that they know the size of things, they can say geez, I'd rather have two extra smalls or five extra smalls, I had I knew that was an extra large, and that would consume the entire sprint, I wouldn't have done it. So you continue to do this, okay. And you continue to stick cards up here, and you continue to play the point value, you don't violate it. Now, don't get me wrong. If you're working in a sprint and you get your 10 points done, you don't stop. Right, you pull the next highest value card and you keep going. Okay, and again, I'm a big fan of Kanban Bigger, bigger fan of Scrumban combined Scrum and Kanban. But, yeah, so you go through this, we lay out the plan. So that's step one. Okay. So step one in, like, you can see it over here is we're going to take, and we're going to have the business owners putting the highest value thing first. Okay, I'll just stick it over here. So you can see it. So that's step one. Now that we have the highest value thing, the next thing we're going to do is review dependencies. So once we have the per se Gantt chart up on the wall, now this is when the engineering team, it takes over QA ba developers, they're like, Yeah, you know what, that's a great plan. But we can't we have to do, we can't do this one before this one. So can we change this around? Okay, or we'll look at it, we'll look at other outside team dependencies. We'll say, Yeah, you know, what the problem is, is that these two require that we work with another vendor, or we work with our infrastructure team. And four weeks from now, I know that they don't have any capacity. Because you actually will bring in these outside teams in here. You will bring in your infrastructure, your security team, when you're doing this release planning. So anybody outside the team that's dependent on delivering business value there, they need to come in and say, Yeah, that's great. But these cards have security implications. And my team's totally consumed for the next five, Sprint's, and we don't have any capacity to actually support delivering that business value. So what you're doing is you're instead of like a waterfall when you create the perfect project plan, and then you go around and ask everybody if it's good, and everybody nods their head, right? You're actually bringing them into the room in front of your business partners saying is this a valid claim? Right, can you support this ever been and your business partner started realizing, holy crap, I thought I was just asking Jeff, to do something for me and Jeff had to go and get somebody from security. Somebody from infrastructure and somebody from DevOps and somebody and they start seeing all that talent that it requires actually execute and deliver this technology. Okay. And so and they see you see everybody having this intelligent discussion about Jishu. This happened first, what happened? Second, this one requires another vendor is one where it needs security. So it's the power of the conversation. That's why story cards are about conversations. Because if you write it down as if it's just a requirement, is that precise? You're kind of kidding yourself. Okay? Because it isn't that precise. It takes a lot of knowledge workers to achieve business value and leverage technology. So that's the whole key word. So the second thing we just did, right, is we just reviewed dependencies. Alright, so now the last thing we're going to do is pull risk forward. Okay. So now that we have this plan, this release plan laid out there, we're gonna say, alright, well, what's, what's the hardest thing that we need to do on that? It's like, Well, geez, you know, what, we want to ship after 12 weeks, six iterations, we actually want to ship something to production. But we're gonna do something we've never done before, all the way about iteration five. Okay, we're actually going to do an integration with Lean though. And we've never worked with Lean dog before, or we're going to, we're going to embrace a new technology into the mix that we've never done. So that's risky. So why don't we take that card? It's flagged as a high risk card. And let's say, Well, what can we do to do something riskier? sooner? Okay, so we'll start moving cards by risk back in our iteration so that we we uncover the the highest risk things first, if we wait to iteration five, and find out that that thing was an extra large, and we thought it was a medium, right, and it blows up on us? We're screwed, we can't hit our date, because it's way more work than we have capacity and time to do. Okay, and I'm sorry, I can't really see the chat window. So yeah,

it was a quick question. Earlier, you had mentioned serving multiple product owners, you know, multiple projects for the team? Is there a number you typically try to get that to? Or, you know, an optimal is depend on the team?

It depends on the product that you're working on? It's a great question. I, you know, we, we've, I've been doing this for a long time. So we've coaches about every kind of product project, we did an SAP implementation with, with a large company here. And they had, they had 12 people who could configure in and modify SAP and 816 product owners that want them to modify 16, right, because 16 people needed that system to be configured it for them to improve their process and their job. So I don't think there's a limit on product owners at all. It just takes discipline and, and the key was that many product owners is, you know, the product code into the grooming session. So when you pull the product that is in front of the plan, you're constantly adjusting the plan. And I'll go there in a minute about velocity and, and how we adapt and adjust. But the key is like, if those Proctor's didn't show up for this backlog, planning meeting, guess what their cards didn't get prioritized. So you've learned pretty quickly that, you know, I need to show up and I need to speak to true business value. Because with my all my colleagues want, there's a level of people that can do the job and 16 people that want them to do work. And all 16 of them could have consumed them full time. And so they really had to get good at balancing and agreeing as product owners, who goes first, second, third, are we doing round robin? Are we going to come up with a business value scoring process? To do that? That's typically what we do is we'll come up with a good way of determining business value with them. And it's custom per product. But that's a great question. Any other questions about this? So far? Okay, so now that we kind of have a release plan, and remember, we guessed on how many points we're going to do. Now we're going to start working and we're going to work out I'll call it two weeks sprints. Over here. Let's see if you guys can see this. So now we're actually going to create calculate velocity. So, worker. So over here, we have to have time, so this is iterations. Okay, so this is Sprint 1.2345. Over here, we have points 510 1520 25. So we've worked at first spread, we got done, we said, hey, how many points how many cards do we get done? You know, we wanted to get these cards done. There's 10 points here. But you know, we got them all done, except for this one. We actually only got four or five six points on a 10. Okay, so we go over to we go over the chart and we say okay, iteration one, we got six points. Okay. So Typically, when I'm starting with a new team, I like to go three sprints before I have an average. So I like to take the amount of points we get done for each sprint, and then have a rolling average of how many points we can bring it. But when you're starting, we just guessed at 10, we only got six times. Okay, so we got six. So we now said, Okay, well, now we need to shift. To try to do this virtually, we now now have to take this card, which we didn't get done, and we have to shift it over here. Right. So now we now have to take something here because our plates full break and shift this card back. So every sprint, we're going to say, based on our current velocity, which cards you want to get done, you don't get partial credit for cards. That's called hangover, by the way. So when one card hangs over the next sprint, you can't say, Well, geez, we got 50% done, because we're not going back to this hourly percentage game. Okay, we're saying we didn't get done, we couldn't ship it. It doesn't matter. If we were two hours away from getting it done or one hour, we still didn't get it done. Because things are always going to things, you're always going to kind of fall over to the next iteration. You the goal isn't to get everything done, and then go home. Right, the goal is always be working on on everything all the time. So in this case, we're going to swing that card over. So now we go through in that sprint, we got six, then the next sprint, and we actually got 10. Then we got you know, hey, we're doing really good. Now we got 12. So what we're doing is we're creating a chart, right, that says, here's our velocity. Again, I like to go three sprints. Before I actually think I have an average, that's predictable. So as as we start adjusting this, and we say, well, we got six down here, we got actually got 10 And we got 12. Right, the point is at some point, as our team matures, our velocity isn't you can't constantly go up, right, the car can't keep going faster and faster. We fixed the people on the team, they're working hard 40 as transparent as possible. There's only so many things problems they can solve in the sprint. So questions about that? Like I lost my zoom window for some reason. Oh, we're good.

Sorry, I took myself off. So I can sneeze.

Okay, so any questions about that so far?

You know, I, we can keep keep it to the end. But maybe at the end, you could give us a a thought on, you know, in these COVID times when we don't have everyone's got six whiteboards at home. If you have any thoughts on doing this without moving the laptop around, maybe later, we can talk about that.

Yeah, I mean, clearly, you know, with COVID, we have to embrace technology. Now. We've been using Miro mural for a lot of our planning gaze sessions. You know, most people with this today, everybody's using JIRA. Atlassian is kind of ruling the world, they've bought up every software company integrated with everything. So most people are doing this tool. The reason I like the paper, and the reason I chose to do this presentation at the boat today is because when you do not pay like this, there's a physical limitation, it's pretty easy to see my plates full. Okay, the one of the challenges I have with with tools is it, the cloud storage is infinite, I can send a million requirements into a JIRA database, right or a spreadsheet or, or something. And so what happens is, if you keep taking requests, then people think that you're going to actually get it done. Okay, I got my ticket, and I got my requirement. And so eventually, I'm going to actually get it. And I really like to do this physical planning with the business because it gives them a sense of sizes, and space and capacity. And I can't, I'm not violating this 12 Understand, or the six, right, that's my, that's my predicted speed of problem solving for this team. We hope will get better as a team, your team is going to business customers are going to they watched us do estimation, they watched us do sizing. They watched us do planning, right, then they're going to actually hear us do a retrospective and do a show and tell and I'll come back to that. I'll go back to my slide deck here. And I'll explain to you some of the feedback loops that really make this release planning thing work.

Okay, you guys see my screen. Good. Okay. So just to recap CES, I didn't cover this point. So why did it why did we only have the developers to the estimation? Okay, it seems crazy, right? Because in waterfall, he would say, hey, how long would it take to write requirements? How long is it gonna take to code it? How long does it take to test it? And then we add up all these individual estimates. And then we then we actually had it right, we say, Okay, now I'm going to I'm going to, I'm actually going to add maybe 30% overhead because we know we're This isn't precise. Right? And then I'm gonna hope that we We went off and our estimates by more than 30%. Okay, that's how most people do waterfall. So in Agile the developers do it. Okay, why did the developers do it? Remember, we're sizing the work. So typically, okay. The harder it is to code, the harder it was to do everything else. So it was really complex, it took a lot of code, right? Okay, then it was probably harder to do the requirements for that code, it's probably harder to test it, right, because it was more complex. So typically, the complexity of the coding effort carries through the size of the problem. Not all the time. I'm not saying sometimes it was really, you know, it was really easy to code. But it was hard to write the requirements, right. So but assume that 80% of the time, that the size, the amount of the code that we wrote, was indicative of the testing effort was now more like the testing effort or the requirements effort. Right now, we have a relative size, summing up the parts at individual roles of the knowledge workers, just doesn't work it, there's so much imprecision there. And so that's, that's why we have the developers do it. Now when we're doing the planning poker, okay? And we're doing that when we do the flop. QA is in the room, business analysts in a room, you know, when we say, hey, you know, as a user, I want to be able to do this so that I can do this. We're going to talk to our customers like, Okay, do you want that to be more like how you do it on Amazon? Or how you do it on eBay? Or on PayPal? Right? There's so many ways we could solve, we can make that experience happen. And so by having everybody in the room design thinking folks, testers, everybody talking about the testing complexity, that's all that valid, right? Everybody can talk about that. So we understand the scope. And we'll write down sometimes in the back of the card, what the acceptance criteria is. Okay. Wow, when we had that conversation about this, on the back of the car weighed down, okay, yeah, and it has to, it has to happen within, you know, a half a second. And, you know, so and the, the field needs to be masked, and this, so we'll write some of the some of the acceptance criteria we talked about when we came up with how big or small that problem was. Okay. Another thing that I want to mention is when you do this velocity chart, you can't compare points across teams, right? So for example, if one team with that working in SAP system has an extra large card is where 16 and eight, four, you can't compare that team's velocity to another meeting velocity, because they're different people. They're different technologies. And they solve problems differently as a team. Okay, so that's one of the biggest mindset mistakes I see is people take take velocity, and they're like, oh, geez, this team is better than that team, because they're going faster. No, they have different people on their team. They some of them were more mature teams, and collaborative teams and others, some are using, they're all probably using some, they all have different skills and different technologies that they're embracing. To do it. They have different product owners that they're working with, right to even do this. So you really can't compare points across teams. Again, here's the Fibonacci method. I think, Kevin, you alluded to, yeah, I don't 2040 13 I just think it was great for a book, I'd be honest. release planning. I've mentioned this already. I just want to recap, right, we we apply our velocity review dependencies are pulling value forward, pulling a risk forward, there's a thing called spikes in Agile, where you basically let's say that, let's say that we were going to do that, that that one hard card and iteration five, and we want to pull it forward, and we say, okay, rather than actually doing the card with Lean dog, right, and moving the workup? What if we just did a test? What if we wrote a what we call a spike, call it r&d, I'm just gonna do a Hello World, I'm going to send something to lean dog and get it sent back. And I'm gonna throw it away. But now that I've done that, and I know that we can communicate with them and get stuff back, right, I feel better about that. That risk coming up later in the plan. So those are called spikes. Spike cards are basically r&d. While we did the estimation, we weren't sure we tried these cards were really hard to size, because they're doing something in Ruby, and we've never done anything with Ruby. So maybe, you know, maybe Kevin should go play with Ruby for a while and write something simple, and then come back and say, Yeah, you know what, Ruby, is pretty easy. And I think we can embrace that skill pretty quickly. So I think that's about the right size for the card. So that that would be an example of a spike. You went off to learn something. Okay. Check my time here. All right.

For a few minutes, there's there's a little bit of side chatter. I don't know if you wanted to talk about it. The thing going back to the comment of a team working on multiple projects at the same time, developer, you know, having two projects to go back and forth on the question that keeps coming to my head every time I'm reading comments is when you're planning and I've got the development staff you know, of sizing things, but then stakeholders being president, doesn't it make that aspect of things much more complex? And I've got to do twice the stakeholders or I would have to do some of this at the same time, right, in order to get a good picture of what I can try to do in a sprint?

Yes, that's a great question. So if you're going to do if you have multiple product owners, that you're not going to, you'll do separate sizing sessions with him. Right, so you're not gonna make one product owner watch the size of the work for another product owner. So the scrum master iteration manager will facilitate, hey, let's bring product owner a in let's estimate their backlog. Now, now we're gonna have another meeting with product owner B, and we're going to estimate their backlog. So the estimation sizing, we will not we will not do that, like all the Proctor's don't have to be in a room. The release plan is when we need the multiple product leaders in the room, because now we have one team, they need to we don't care, I tell people, I got a degree in engineering, I love taking applying technology to solve business value, I don't care who I make happy, right? I just want to do the best thing for the company. So the product owners can find out who gets capacity from this team, right? We have a fixed team, they in fact, it's really great, because when you do it this way, you learn so much more about the business, because the product owners are up there talking about, hey, why why do I need this business value? And why do you need your business value. And when they're having that discussion in front of the whole team, that's conversation and not the whole, the whole team usually doesn't get to hear, right, they usually it's like, oh, some ba went off the right requirements. And they understand the business value, because they were talking to the product owner. Now the product owners are standing in front of the entire team. And they're saying I want this because of this. And this is more important than this. And this is more important than that. And that that motivates the team. Because now they're actually looking at their customers. That is not like they had this Gantt chart that somebody, a project manager made up for them. You know, the whole team made up the Gantt chart, right? And so that, that now there's a passion, we better deliver on our promises. We just have this very transparent, conversational thing with our product owners, we're looking them in the face, or telling them if something's Big or small, or telling them you know, if that's in the right order, so that the accuracy of your your whole plan is so much better, because you're doing it in front of your business owners. And, and you know, I tell you, it's not often that you have i that we coached teams with multiple product owners, I'd say it's more the rare occasion. Most people we go into they have, they might have a team with one or two product owners, maybe one, but it's where we have like a sap implementation with 16. So and that's a good question. Yeah, thank you. I'm having trouble being the cameraman and whatnot. No, no worries. Questions. Really?

Greg, Connor, does that help? Kick those Yes. Okay.

Okay, so I'm missing velocity, I just wanna kind of recap a couple things I talked about. So the other important part of this is the ceremonies that we have. If I had extra time, I could go through these, but basically, that you close out a one or two week iteration by doing a show Intel, so you pull the entire team into a room, and you demonstrate working software. So you bring your product owners in your entire team in when we're done with our two weeks sprint, we got six points done their first iteration, now we're actually going to demonstrate the working software. So we're gonna pull up on a big screen or TV. And we're actually going to demonstrate what we actually built. Okay. And this is really important because it motivates the team. It's another it's a last opportunity for the progress a Yep, we love it. We've already showed it to some of our customers, and we're excited for them to get it. It also, you know, it gives you gives everybody a sense of seeing the whole, because often in software development, and particularly even in COVID times, you're working in your on your thing, I'm working on my story card, but I didn't get to see the other five story cards I got done in that sprint. So for me to see what Kevin did, and Jeff did, and Amy did write as coworkers, and actually demonstrate that in front of the customer is extremely important. We did we're working with the largest paint company here in Cleveland. And we were doing show until we were working on a global product for them. And the they were so proud of the work that we were delivering that we would do show Intel's for hundreds of people, they would have their entire sales team from around the globe be able to dial in to watch that show until in a big theater. And we're getting videos sent from the field like they would go out to like a paint, automotive paint paint supplier and they would shoot videos of happy users using the product. Right somewhere in Chinese. Somewhere in Indian so we we couldn't always understand what they were saying in the video but It the folks in the field that we're actually taking releases over software started sending in customer delight videos to motivate the team that, hey, what you're building is truly having an impact to our customers. So show and tell us your powerful, it's a positive, it's, it should be a positive time, that kind of brag about what you did for everybody to see all the awesome work you did, and to celebrate it. Okay. So now that we've done the show Intel, we're going to look at our velocity, we're going to update our velocity chart and say, Hey, we got six points done, we get 10 points done, and we're going to adjust our predicted velocity based on yet on what we did, we aren't gonna look for hero moments, there's a saying in Agile that, you know, just pre global warming that yesterday's weather that it's not, if we only got 10 points, we aren't going to get 20 In the next sprint, we aren't going to get 40 Like don't expect a miracle to happen. That team worked too hard 40, they worked as transparently as they could to deliver software. So I know that we wish we were going faster. But yesterday's weather, the velocity that we the number of problems, we're able to solve for whatever reason in the last couple of Sprint's that's indicative of the speed at which we're solving problems. So, if you're looking for hero moments, if you don't like this velocity, and there's a great video, I'm gonna, I'm gonna refer to at the very end of this talk that everybody here should watch. It's the number one agile video in the world, it does a great job of explaining velocity, product ownership, Scrum Kanban. Tried to get to that. So now that we've done that, now we're going to do a retrospective. So the retrospective is simply what worked, what didn't work, we put post it notes up on the wall, we say, you know, this, this went really well, this didn't go so well. And we, you know, kind of do that we do that with our product owners, too. We could, we could say things like, geez, you know what I needed to work with Amy, she was a product owner for these cards. But when we went to actually work on him, Amy wasn't around. So we actually went to do the work and we couldn't get a hold of Amy because she was out with a customer. And that that meant when we actually did the work, we actually didn't get it right the first time. So it's okay to talk about in the retrospective, how's our relationship with the business, what's working, what's not working as a team. Now that we've done that, we're going to update our target velocity, we're going to pull the cards and adjust the plan, right, and then people are gonna sign up, and we're gonna start the next sprint. So those are the scrum ceremonies super fast. I think that one of the keys to this is the product owners is 100% engaged with the story Card Writing, the prioritization, reviewing the work the show and tell us I think one of the biggest challenges when you go Agile is that is that we, the product owners don't realize how much more work is on them. Okay, we've shifted a lot of the work to the business, that they're just as accountable for our outcomes, that they need to be in the room with us. They need to attend the ceremonies, they need to watch us create a Gantt chart, right and see how complex it is to do that, and they need to get gain appreciation, appreciation for what we do. Okay? This is the video is going to mention. It's called Agile product ownership in a nutshell, by Hendrik nuber. Let me hit play just so you can see it real quick. Just so jot that down. That's about a 15 minute video. It's got millions of views. Most companies we go to this, this video gets shipped around to all the executives, and explains quite a bit about how you fix the team how you feed work in based on business value. It talks a lot about different philosophy charts, and how you fixed time fixed scope variable time variable scope, see does a great job of explaining different types of velocity metrics. And I highly recommend it. So we're getting very close to the end here on time. Yeah, we

have just just a few minutes left, there are a couple of questions on how much slide were yet. I said. That's Oh, great. So there's a question from from Linda about unfinished stories. How do you handle them? Does it bounce around a little bit? What do you do with things that you would call the hangover? It's always part of the process. Maybe How do you handle the unfinished work? Yeah,

so again, event once we get like three three, Sprint's done, we're just working on a rolling average of our velocity, okay? We're not predicting or velocity is that precise. So the fact that we're always gonna have cards hangover, that's just going to keep happening. And so that's, that's built into the fact that it was precise and we were just going to do the cards that we planned. And then if we get them done, everybody goes home. Now. We're all getting paid to keep working. We're all going to keep working so things are gonna keep rolling from Sprint, and when you start blending out, your velocity is like an average over three or four Sprint's it doesn't matter. Again if I'm gonna push you guys to study Kanban we were free gadgets playing class next week lean dog. The but we I like Kanban because I like cycle time better than the last He personally, because I think it's it's a continual measurement verse where with Scrum, you get your stablished velocity every two weeks and you keep averaging it out or cycle times and ongoing continual thing in Kanban. I like Scrum and I like Kanban. I like scrum one. I like the ceremonies of Scrum. I like some I like Kanban. Because it's actually, I think, more precise and Scrum is more metrics. There's more limits. But that's a different talk, where the questions we have

Does anyone else have any? That's a lot of it. There was a lot of side chat on the context switching prioritization of the work if you got different projects going on. Things like that. On a personal note, I don't know if anyone has also attended John's week long. Where were you calling it agile waterboarding hit? But I highly recommend it. Yeah, it was it was definitely worth the price was right to.

It's free. It's next week. Yeah, you can go to lean dog resources training. It's called Agile explaining the line. It's two and a half hours a day. We cover everything from, you know, agile, the scrum, the Kanban, to DevOps, design, thinking, testing, engineering, you name it.

I've tried myself a number of times, and it's fantastic. I always Yeah, ended up getting meetings scheduled do that work, but and have to be meetings, but I've participated on and off. But it's fantastic. Really appreciated. John, thank you. Alright.

Well, with that. Well, Jeff, did you look at your training, you're on the verge?

Yeah. Just very quickly, as John mentioned, he's got that I'm going to be sending out to everybody, an announcement about that. Announcement of other training classes. We got something from Project brilliant this morning about some things that are going on. So I'm going to be trying to send that out to everybody, not only in Pitt agile, but who've signed up for this particular conference. And, you know, just again, man, there's so much out there. And I know that there's a lot on people's plate. But if you can take advantage of some of these things, as you can see, I mean, I've been getting feedback that these sessions have been real helpful to everybody and drawn. This is another one. So kudos. Yeah, on the chat, a agile explained class note there. So yeah, please go to that. I also want that side chatter, you know, where I threw up a book that's on Amazon. It's like 99 cents on kindle a day. It's by former General Stanley, McChrystal, and and again, great, great discussion on how building teams that are consistent, really move things forward.

Thank you, Kevin. All right. Well, with that, John, we really, really appreciate your time. Keys. Everyone else you got about nine minutes to take care of business? And we'll we'll know you just got one more.

The survey on the site. I'm

sorry. Thank you. There is a survey. If you go back over to Huva you'll see a session. There you go. You can go and take it please do that helps everyone else quite a bit on this. Again, the session recording will be posted on YouTube as well. Thank you. Thanks a lot. Bye, everybody.
