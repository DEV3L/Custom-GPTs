I'm talking about iteration manager. And this role is near and dear to my heart, because I've run several teams, and also seen a lot of problems with this with various client engagements. So what's the responsibilities this person, really to remove barriers between the product owner and the team? How do we get that collaboration communication, going to work with the product owner to maximize the business value here? Are we really working on the most important thing, are we providing what's really necessary to achieve the business objectives? Another thing we want to do is improve the lives of the team members in a way that facilitates productivity and empowerment. This one is a huge change when you compare it to your normal project manager, manager type when they're running teams, this is a servant leader kind of role. And in some ways, you've got to have a pretty thick skin, especially when the teams get a little more mature, they're willing to speak up, they're willing to engage, they're willing to say something about how things are going. And it might be something that they don't like about what you're doing. And you really have to try to work with the team to address these issues and get on their side. So it's us against the problem, as opposed to them against you. It's not a command and control thing, where I'm telling them what to do, and actually telling them how to do it. I want to get them engaged, that they really want to be there. They're working on really cool stuff, or good stuff, important stuff. And their opinion is valued. Because one thing I know for sure, as a leader of a team, I'm not going to be the one coming up with all the good ideas. And they're the ones who need to have that intensity. So if they're fully engaged, I know from my managers perspective, I'm going to get a lot more out of it. And in some ways, that's seems like kind of a sneaky thing to do. But that's the whole ballgame. We want them to be very engaged, very enthusiastic about what they're doing. And then I know I'm going to get their best efforts. Another thing I'm looking at, is productivity. And in some ways, there's a lot of things that come out of the Agile toolkit. So for example, like test driven development, if I want to have significant reduction of issues I find in production, which I could look at view that is a productivity, measurement on quality being pumped out, I want to use that practice. So the scrum master iteration managers kind of thought to be the source of truth on a lot of these things. And in some ways, this is probably where they become more of a policeman, trying to make sure, hey, things are being done. But the policeman role really should come out to Hey, the team agreed to do test driven development, hey, we agreed to get certain levels of quality out. And if the team starts to fall off the bandwagon, hey, we agreed as a team, we're going to do that. So the the iteration manager has the job to kind of get everybody back on the wagon, and move things along. Another thing when you looked at engineering practices, Hey, are we really going through and doing and this is where you get some difference between Scrum and extreme programming, that a lot of the benefits is getting both engineering practices and the project management team management practices together. So this way, we kind of liked the idea of an iteration manager, that it says, Hey, we're not just focusing on project management roles. Another activity you should be doing is, hey, where do we stand? Ideally, this is an invisible way. So burndown charts, risks and issues are still things that come up. Do we have that on a visible place on the wall? When we look at status reporting, you still might have to do some things like Hey, where are we on the budget? How much money have we burned through so far? Where are we on our backlog? The infamous question, Hey, when are we going to be done? They should be all facilitating some sort of reasonable response to those questions.
