One thing we offer often encounter when working with teams is overly complex designs, architectures that are so complex that the team spends the majority of their time writing code satisfy the architecture as opposed to writing code to satisfy the business requirements and deliver value to our customers. Simple and evolutionary design is a practice of keeping our design and our architecture as simple as we possibly can. At each stage in the application development, we want to make sure that we have a really solid design and a solid architecture to satisfy the current business requirement. And as our application grows, and as we add new requirements, we want to evolve the design in that case as well. This practice works very well with test driven development, in that we can use TDD and the test that it produces to help us continuously evolve the design of the application. So at any point, we strive for having the simplest design we can think of to satisfy the current business requirements. Each time we add new code or add new requirements, that design will evolve a little bit. Initially, that design will get a little messy, and that's part of what writing code is all about. We refactor that code to continuously keep that design really clean, robust, and and malleable and easy to change over time. So both evolutionary design is the practice that helps us do that. We evolve the design, we evolve the architecture, we keep it as simple as we possibly can at each stage. In the end, what we're going to end up with is code that is very focused on delivering value, and that satisfies the most basic requirements of design
